//EdgeNode
public class EdgeNode {
    int toV;
    int weight;
    EdgeNode next;

    EdgeNode(int toV, int weight, EdgeNode next) {
        this.toV = toV;
        this.weight = weight;
        this.next = next;
    }
}

//洧놑洧눅洧눖洧눏 2洧눅
public class Task2a {
    public static int vertexWithMaxSum(int[][] adjMatrix) {
        int maxSum = Integer.MIN_VALUE;
        int vertex = -1;

        for (int i = 0; i < adjMatrix.length; i++) {
            int sum = 0;
            for (int j = 0; j < adjMatrix[i].length; j++) {
                sum += adjMatrix[i][j];
            }
            if (sum > maxSum) {
                maxSum = sum;
                vertex = i;
            }
        }

        return vertex;
    }

    public static void main(String[] args) {
        // Create an undirected, edge-weighted graph with 7 vertices (0-6)
        int[][] adjMatrix = new int[7][7];

        // Add edges with weights (ensuring the graph is undirected by making the matrix symmetric)
        // Edge between vertex 0 and 1
        adjMatrix[0][1] = 5;
        adjMatrix[1][0] = 5;

        // Edge between vertex 0 and 2
        adjMatrix[0][2] = 7;
        adjMatrix[2][0] = 7;

        // Edge between vertex 0 and 4
        adjMatrix[0][4] = 3;
        adjMatrix[4][0] = 3;

        // Edge between vertex 0 and 6
        adjMatrix[0][6] = 15;
        adjMatrix[6][0] = 15;

        // Edge between vertex 1 and 2
        adjMatrix[1][2] = 2;
        adjMatrix[2][1] = 2;

        // Edge between vertex 1 and 3
        adjMatrix[1][3] = 8;
        adjMatrix[3][1] = 8;

        // Edge between vertex 2 and 4
        adjMatrix[2][4] = 4;
        adjMatrix[4][2] = 4;

        // Edge between vertex 2 and 5
        adjMatrix[2][5] = 9;
        adjMatrix[5][2] = 9;

        // Edge between vertex 3 and 4
        adjMatrix[3][4] = 1;
        adjMatrix[4][3] = 1;

        // Edge between vertex 3 and 6
        adjMatrix[3][6] = 10;
        adjMatrix[6][3] = 10;

        // Edge between vertex 4 and 5
        adjMatrix[4][5] = 6;
        adjMatrix[5][4] = 6;

        // Edge between vertex 4 and 6
        adjMatrix[4][6] = 12;
        adjMatrix[6][4] = 12;

        // Edge between vertex 5 and 6
        adjMatrix[5][6] = 2;
        adjMatrix[6][5] = 2;

        // Print the adjacency matrix for verification
        System.out.println("Adjacency Matrix (Undirected, Edge-Weighted Graph):");
        for (int i = 0; i < adjMatrix.length; i++) {
            for (int j = 0; j < adjMatrix[i].length; j++) {
                System.out.print(adjMatrix[i][j] + " ");
            }
            System.out.println();
        }

        // Find vertex with maximum sum of edge weights
        int maxVertex = vertexWithMaxSum(adjMatrix);

        // Calculate and display the max weight sum
        int maxSum = 0;
        for (int j = 0; j < adjMatrix[maxVertex].length; j++) {
            maxSum += adjMatrix[maxVertex][j];
        }

        System.out.println("\nVertex with maximum sum of edge weights: " + maxVertex);
        System.out.println("Maximum sum of edge weights: " + maxSum);
    }
}

//洧놑洧눅洧눖洧눏 2洧눆
public class Task2b {

    public static int vertexWithMaxSum(EdgeNode[] adjList) {
        int maxSum = Integer.MIN_VALUE;
        int vertex = -1;

        for (int i = 0; i < adjList.length; i++) {
            int sum = 0;
            EdgeNode current = adjList[i];
            while (current != null) {
                sum += current.weight;
                current = current.next;
            }
            if (sum > maxSum) {
                maxSum = sum;
                vertex = i;
            }
        }

        return vertex;
    }
    public static void addEdge(EdgeNode[] adjList, int from, int toV, int weight) {
        EdgeNode newNode = new EdgeNode(toV, weight, null);

        if (adjList[from] == null) {
            adjList[from] = newNode;
        } else {
            appendLL(adjList[from], newNode);
        }
    }

    public static void appendLL(EdgeNode head, EdgeNode eNode) {
        EdgeNode current = head;
        while (current.next != null) {
            current = current.next;
        }
        current.next = eNode;
    }

    public static void main(String[] args) {
        // Create an undirected, edge-weighted graph with 7 vertices (0-6)
        EdgeNode[] adjList = new EdgeNode[7];

        // Add edges with weights (ensuring the graph is undirected by adding edges in both directions)
        // Edges between vertex 0 and others
        addEdge(adjList, 0, 1, 5);
        addEdge(adjList, 1, 0, 5);

        addEdge(adjList, 0, 2, 7);
        addEdge(adjList, 2, 0, 7);

        addEdge(adjList, 0, 4, 3);
        addEdge(adjList, 4, 0, 3);

        addEdge(adjList, 0, 6, 15);
        addEdge(adjList, 6, 0, 15);

        // Edges between vertex 1 and others
        addEdge(adjList, 1, 2, 2);
        addEdge(adjList, 2, 1, 2);

        addEdge(adjList, 1, 3, 8);
        addEdge(adjList, 3, 1, 8);

        // Edges between vertex 2 and others
        addEdge(adjList, 2, 4, 4);
        addEdge(adjList, 4, 2, 4);

        addEdge(adjList, 2, 5, 9);
        addEdge(adjList, 5, 2, 9);

        // Edges between vertex 3 and others
        addEdge(adjList, 3, 4, 1);
        addEdge(adjList, 4, 3, 1);

        addEdge(adjList, 3, 6, 10);
        addEdge(adjList, 6, 3, 10);

        // Edges between vertex 4 and others
        addEdge(adjList, 4, 5, 6);
        addEdge(adjList, 5, 4, 6);

        addEdge(adjList, 4, 6, 12);
        addEdge(adjList, 6, 4, 12);

        // Edges between vertex 5 and 6
        addEdge(adjList, 5, 6, 2);
        addEdge(adjList, 6, 5, 2);

        // Print the adjacency list for verification
        System.out.println("Adjacency List (Undirected, Edge-Weighted Graph):");
        for (int i = 0; i < adjList.length; i++) {
            System.out.print("Vertex " + i + " -> ");
            EdgeNode current = adjList[i];
            while (current != null) {
                System.out.print("(" + current.toV + ", " + current.weight + ") ");
                current = current.next;
            }
            System.out.println();
        }

        // Find vertex with maximum sum of edge weights
        int maxVertex = vertexWithMaxSum(adjList);

        // Calculate and display the max weight sum
        int maxSum = 0;
        EdgeNode current = adjList[maxVertex];
        while (current != null) {
            maxSum += current.weight;
            current = current.next;
        }

        System.out.println("\nVertex with maximum sum of edge weights: " + maxVertex);
        System.out.println("Maximum sum of edge weights: " + maxSum);
    }
}

//洧놑洧눅洧눖洧눏 3洧눅
public class Task3a {

    public static int[] vertexMaxOutDegree(int[][] adjMatrix) {
        int maxDegree = -1;
        int count = 0;  
 
        for (int i = 0; i < adjMatrix.length; i++) {
            int outDegree = 0;
            for (int j = 0; j < adjMatrix[i].length; j++) {
                if (adjMatrix[i][j] != 0) {
                    outDegree++;
                }
            }

            if (outDegree > maxDegree) {
                maxDegree = outDegree;
                count = 1;
            } else if (outDegree == maxDegree) {
                count++;
            }
        }

        int[] maxVertices = new int[count];

        int index = 0;
        for (int i = 0; i < adjMatrix.length; i++) {
            int outDegree = 0;
            for (int j = 0; j < adjMatrix[i].length; j++) {
                if (adjMatrix[i][j] != 0) {
                    outDegree++;
                }
            }

            if (outDegree == maxDegree) {
                maxVertices[index++] = i;
            }
        }

        return maxVertices;
    }

    public static int vertexMaxWeightSum(int[][] adjMatrix) {
        int maxSum = Integer.MIN_VALUE;
        int vertex = -1;

        for (int i = 0; i < adjMatrix.length; i++) {
            int sum = 0;
            for (int j = 0; j < adjMatrix[i].length; j++) {
                sum += adjMatrix[i][j];
            }
            if (sum > maxSum) {
                maxSum = sum;
                vertex = i;
            }
        }
        return vertex;
    }

    public static void main(String[] args) {
        // Create a directed, edge-weighted graph with 7 vertices (0-6)
        int[][] adjMatrix = new int[7][7];

        // Add at least 16 edges with weights
        // Edge from vertex 0
        adjMatrix[0][1] = 5;
        adjMatrix[0][2] = 7;
        adjMatrix[0][4] = 3;

        // Edge from vertex 1
        adjMatrix[1][0] = 5;  // Corresponding edge (can be different weight in a directed graph)
        adjMatrix[1][2] = 2;
        adjMatrix[1][3] = 8;

        // Edge from vertex 2
        adjMatrix[2][0] = 7;
        adjMatrix[2][4] = 4;
        adjMatrix[2][5] = 9;

        // Edge from vertex 3
        adjMatrix[3][1] = 8;
        adjMatrix[3][4] = 1;
        adjMatrix[3][6] = 10;

        // Edge from vertex 4
        adjMatrix[4][5] = 6;
        adjMatrix[4][6] = 12;

        // Edge from vertex 5
        adjMatrix[5][2] = 9;
        adjMatrix[5][6] = 2;

        // Edge from vertex 6
        adjMatrix[6][0] = 15;
        adjMatrix[6][3] = 10;

        // Print the adjacency matrix for verification
        System.out.println("Adjacency Matrix (Directed, Edge-Weighted Graph):");
        for (int i = 0; i < adjMatrix.length; i++) {
            for (int j = 0; j < adjMatrix[i].length; j++) {
                System.out.print(adjMatrix[i][j] + " ");
            }
            System.out.println();
        }

        // Find all vertices with maximum out-degree
        int[] maxDegreeVertices = vertexMaxOutDegree(adjMatrix);

        // Calculate and display the max degree
        int maxDegree = 0;
        if (maxDegreeVertices.length > 0) {
            int firstVertex = maxDegreeVertices[0];
            for (int j = 0; j < adjMatrix[firstVertex].length; j++) {
                if (adjMatrix[firstVertex][j] != 0) {
                    maxDegree++;
                }
            }
        }

        // Format the vertices array as a string
        StringBuilder verticesStr = new StringBuilder();
        for (int i = 0; i < maxDegreeVertices.length; i++) {
            verticesStr.append(maxDegreeVertices[i]);
            if (i < maxDegreeVertices.length - 1) {
                verticesStr.append(", ");
            }
        }

        System.out.println("\nVertices with maximum out-degree: " + verticesStr);
        System.out.println("Maximum out-degree: " + maxDegree);

        // Find vertex with maximum sum of outgoing edge weights
        int maxWeightVertex = vertexMaxWeightSum(adjMatrix);

        // Calculate and display the max weight sum
        int maxSum = 0;
        for (int j = 0; j < adjMatrix[maxWeightVertex].length; j++) {
            maxSum += adjMatrix[maxWeightVertex][j];
        }

        System.out.println("\nVertex with maximum sum of outgoing edge weights: " + maxWeightVertex);
        System.out.println("Maximum sum of outgoing edge weights: " + maxSum);
    }
}

//洧놑洧눅洧눖洧눏 3洧눆
public class Task3b {
    public static int[] vertexMaxOutDegree(EdgeNode[] adjList) {
 
        int maxDegree = -1;
        int count = 0;  

        for (int i = 0; i < adjList.length; i++) {
            int degree = 0;
            EdgeNode current = adjList[i];
            while (current != null) {
                degree++;
                current = current.next;
            }

            if (degree > maxDegree) {
                maxDegree = degree;
                count = 1;
            } else if (degree == maxDegree) {
                count++;
            }
        }

        int[] maxVertices = new int[count];

        int index = 0;
        for (int i = 0; i < adjList.length; i++) {
            int degree = 0;
            EdgeNode current = adjList[i];
            while (current != null) {
                degree++;
                current = current.next;
            }

            if (degree == maxDegree) {
                maxVertices[index++] = i;
            }
        }

        return maxVertices;
    }

    public static int vertexMaxWeightSum(EdgeNode[] adjList) {
        int maxSum = Integer.MIN_VALUE;
        int vertex = -1;

        for (int i = 0; i < adjList.length; i++) {
            int sum = 0;
            EdgeNode curr = adjList[i];
            while (curr != null) {
                sum += curr.weight;
                curr = curr.next;
            }
            if (sum > maxSum) {
                maxSum = sum;
                vertex = i;
            }
        }
        return vertex;
    }

    public static void addEdge(EdgeNode[] adjList, int from, int toV, int weight) {
        EdgeNode newNode = new EdgeNode(toV, weight, null);

        if (adjList[from] == null) {
            adjList[from] = newNode;
        } else {
            appendLL(adjList[from], newNode);
        }
    }

    public static void appendLL(EdgeNode head, EdgeNode eNode) {
        EdgeNode current = head;
        while (current.next != null) {
            current = current.next;
        }
        current.next = eNode;
    }

    public static void main(String[] args) {
        // Create a directed, edge-weighted graph with 7 vertices (0-6)
        EdgeNode[] adjList = new EdgeNode[7];

        // Add at least 16 edges with weights
        // Edges from vertex 0
        addEdge(adjList, 0, 1, 5);
        addEdge(adjList, 0, 2, 7);
        addEdge(adjList, 0, 4, 3);

        // Edges from vertex 1
        addEdge(adjList, 1, 0, 5);  // Corresponding edge (can be different weight in a directed graph)
        addEdge(adjList, 1, 2, 2);
        addEdge(adjList, 1, 3, 8);

        // Edges from vertex 2
        addEdge(adjList, 2, 0, 7);
        addEdge(adjList, 2, 4, 4);
        addEdge(adjList, 2, 5, 9);

        // Edges from vertex 3
        addEdge(adjList, 3, 1, 8);
        addEdge(adjList, 3, 4, 1);
        addEdge(adjList, 3, 6, 10);

        // Edges from vertex 4
        addEdge(adjList, 4, 5, 6);
        addEdge(adjList, 4, 6, 12);

        // Edges from vertex 5
        addEdge(adjList, 5, 2, 9);
        addEdge(adjList, 5, 6, 2);

        // Edges from vertex 6
        addEdge(adjList, 6, 0, 15);
        addEdge(adjList, 6, 3, 10);

        // Print the adjacency list for verification
        System.out.println("Adjacency List (Directed, Edge-Weighted Graph):");
        for (int i = 0; i < adjList.length; i++) {
            System.out.print("Vertex " + i + " -> ");
            EdgeNode current = adjList[i];
            while (current != null) {
                System.out.print("(" + current.toV + ", " + current.weight + ") ");
                current = current.next;
            }
            System.out.println();
        }

        // Find all vertices with maximum out-degree
        int[] maxDegreeVertices = vertexMaxOutDegree(adjList);

        // Calculate and display the max degree
        int maxDegree = 0;
        if (maxDegreeVertices.length > 0) {
            int firstVertex = maxDegreeVertices[0];
            EdgeNode current = adjList[firstVertex];
            while (current != null) {
                maxDegree++;
                current = current.next;
            }
        }

        // Format the vertices array as a string
        StringBuilder verticesStr = new StringBuilder();
        for (int i = 0; i < maxDegreeVertices.length; i++) {
            verticesStr.append(maxDegreeVertices[i]);
            if (i < maxDegreeVertices.length - 1) {
                verticesStr.append(", ");
            }
        }

        System.out.println("\nVertices with maximum out-degree: " + verticesStr);
        System.out.println("Maximum out-degree: " + maxDegree);

        // Find vertex with maximum sum of outgoing edge weights
        int maxWeightVertex = vertexMaxWeightSum(adjList);

        // Calculate and display the max weight sum
        int maxSum = 0;
        EdgeNode current = adjList[maxWeightVertex];
        while (current != null) {
            maxSum += current.weight;
            current = current.next;
        }

        System.out.println("\nVertex with maximum sum of outgoing edge weights: " + maxWeightVertex);
        System.out.println("Maximum sum of outgoing edge weights: " + maxSum);
    }
}

//洧놑洧눅洧눖洧눏 4洧눅
public class Task4a {
    public static void convertToUndirected(int[][] adjMatrix) {
        int n = adjMatrix.length;

        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                if (adjMatrix[i][j] != 0) {
                    adjMatrix[j][i] = adjMatrix[i][j];
                }
            }
        }
    }

    public static void printMatrix(int[][] adjMatrix) {
        for (int[] row : adjMatrix) {
            for (int val : row) {
                System.out.print(val + " ");
            }
            System.out.println();
        }
    }

    public static void main(String[] args) {
        // Create a directed, edge-weighted graph with 7 vertices (0-6)
        int[][] adjMatrix = new int[7][7];

        // Add at least 16 edges with weights
        // Edge from vertex 0
        adjMatrix[0][1] = 5;
        adjMatrix[0][2] = 7;
        adjMatrix[0][4] = 3;

        // Edge from vertex 1
        adjMatrix[1][0] = 5;  // Already bidirectional with vertex 0
        adjMatrix[1][2] = 2;
        adjMatrix[1][3] = 8;

        // Edge from vertex 2
        adjMatrix[2][0] = 7;  // Already bidirectional with vertex 0
        adjMatrix[2][4] = 4;
        adjMatrix[2][5] = 9;

        // Edge from vertex 3
        adjMatrix[3][1] = 8;  // Already bidirectional with vertex 1
        adjMatrix[3][4] = 1;
        adjMatrix[3][6] = 10;

        // Edge from vertex 4
        adjMatrix[4][5] = 6;
        adjMatrix[4][6] = 12;

        // Edge from vertex 5
        adjMatrix[5][2] = 9;  // Already bidirectional with vertex 2
        adjMatrix[5][6] = 2;

        // Edge from vertex 6
        adjMatrix[6][0] = 15;
        adjMatrix[6][3] = 10; // Already bidirectional with vertex 3

        System.out.println("Before conversion (Directed):");
        printMatrix(adjMatrix);

        convertToUndirected(adjMatrix);

        System.out.println("\nAfter conversion (Undirected):");
        printMatrix(adjMatrix);
    }
}

//洧놑洧눅洧눖洧눏 4洧눆
public class Task4b {
    
    public static void convertToUndirected(EdgeNode[] adjList) {
        int n = adjList.length;

        for (int i = 0; i < n; i++) {
            EdgeNode curr = adjList[i];
            while (curr != null) {
                int from = i;
                int to = curr.toV;
                int weight = curr.weight;
                
                if (!hasEdge(adjList, to, from)) {
                    addEdge(adjList, to, from, weight);
                }

                curr = curr.next;
            }
        }
    }

    public static boolean hasEdge(EdgeNode[] adjList, int from, int toV) {
        EdgeNode curr = adjList[from];
        while (curr != null) {
            if (curr.toV == toV) {
                return true;
            }
            curr = curr.next;
        }
        return false;
    }

    public static void addEdge(EdgeNode[] adjList, int from, int toV, int weight) {
        EdgeNode newNode = new EdgeNode(toV, weight, null);

        if (adjList[from] == null) {
            adjList[from] = newNode;
        } else {
            appendLL(adjList[from], newNode);
        }
    }

    public static void appendLL(EdgeNode head, EdgeNode eNode) {
        EdgeNode current = head;
        while (current.next != null) {
            current = current.next;
        }
        current.next = eNode;
    }

    public static void main(String[] args) {
        // Create a directed, edge-weighted graph with 7 vertices (0-6)
        EdgeNode[] adjList = new EdgeNode[7];

        // Add at least 16 edges with weights
        // Edges from vertex 0
        addEdge(adjList, 0, 1, 5);
        addEdge(adjList, 0, 2, 7);
        addEdge(adjList, 0, 4, 3);

        // Edges from vertex 1
        addEdge(adjList, 1, 0, 5); 
        addEdge(adjList, 1, 2, 2);
        addEdge(adjList, 1, 3, 8);

        // Edges from vertex 2
        addEdge(adjList, 2, 0, 7); 
        addEdge(adjList, 2, 4, 4);
        addEdge(adjList, 2, 5, 9);

        // Edges from vertex 3
        addEdge(adjList, 3, 1, 8);  
        addEdge(adjList, 3, 4, 1);
        addEdge(adjList, 3, 6, 10);

        // Edges from vertex 4
        addEdge(adjList, 4, 5, 6);
        addEdge(adjList, 4, 6, 12);

        // Edges from vertex 5
        addEdge(adjList, 5, 2, 9); 
        addEdge(adjList, 5, 6, 2);

        // Edges from vertex 6
        addEdge(adjList, 6, 0, 15);
        addEdge(adjList, 6, 3, 10); 

        System.out.println("Before conversion (Directed):");
        printAdjList(adjList);

        convertToUndirected(adjList);

        System.out.println("\nAfter conversion (Undirected):");
        printAdjList(adjList);
    }
}