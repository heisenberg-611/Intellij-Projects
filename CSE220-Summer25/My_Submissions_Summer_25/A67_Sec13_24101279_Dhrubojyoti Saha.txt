//LAB6

//TASK4

public static void swapChild ( BTNode root , int lvl , int M ) {

        if ( root == null ) return;
        if (lvl < M) {
            BTNode temp = root.left;
            root.left = root.right;
            root.right = temp;
        }
        swapChild ( root.left , lvl + 1 , M );
        swapChild ( root.right , lvl + 1 , M );
    }

//TASK5

public static Integer subtractSummation( BTNode root ){
 
        Integer sum_L = sum ( root .left, 0);
        Integer sum_R = sum ( root .right, 0);
        return sum_L-sum_R;
    }

    private static int sum ( BTNode root, int sum) {
        if (root == null) return sum;
        sum += (Integer) root.elem+sum (root.left, sum)+sum (root.right, sum);
        return sum;
    }

//TASK6

public static Integer levelSum( BTNode root ){
        //TO DO
        int sum = 0;
        Integer sum_O = SumO ( root , 0);
        Integer sum_E = SumE ( root , 0);
        return (sum_O - sum_E);
    }

    private static int SumO(BTNode root, int lvl){
        if(root == null) return 0;
        int sum = 0;
        if(lvl%2==1){
            sum += (Integer) root.elem;
        }
        return (sum+SumO(root.left, lvl+1) + SumO(root.right, lvl+1));
    }

    private static int SumE(BTNode root, int lvl){
        if(root == null) return 0;
        int sum = 0;
        if(lvl%2==0){
            sum += (Integer) root.elem;
        }
        return sum+SumE(root.left, lvl+1) + SumE(root.right, lvl+1);
    }


//LAB7

//TASK4

public static Integer rangeSum( BSTNode root, Integer low, Integer high ){
        
        return rangeSumHelper ( root, low, high); // remove this line
    }

    private static Integer rangeSumHelper (BSTNode root, Integer low, Integer high){
        if(root == null) return 0;

        if(root.elem >= low && root.elem <= high){
            return root.elem + rangeSumHelper ( root.left, low, high )+rangeSumHelper ( root.right, low, high);
        } else {
            return rangeSumHelper ( root.left, low, high )+rangeSumHelper ( root.right, low, high);
        }
    }

//TASK5

public static Integer mirrorSum( BSTNode root ){
       
        if (root == null) return 0;
        return mirror(root.left, root.right);
        
}
    private static int mirror(BSTNode a, BSTNode b) {
        if (a == null || b == null) return 0;

        int sum = 0;
        if (a.elem != null && b.elem != null) {
            sum += a.elem + b.elem;
        }
        sum += mirror(a.left, b.right) + mirror(a.right, b.left);
        return sum;
    }

//TASK6

public static Boolean isBST(BSTNode root) {
        return isBST(root, null, null);
    }

    private static Boolean isBST(BSTNode node, Integer min, Integer max) {
        if (node == null) return true;
        if ((min != null && node.elem <= min) || (max != null && node.elem >= max)) return false;

        if (node.left != null) {
            if (findMax(node.left) >= node.elem) return false;
        }
        if (node.right != null) {
            if (findMin(node.right) <= node.elem) return false;
        }
        return isBST(node.left, min, node.elem) && isBST(node.right, node.elem, max);
    }

    private static int findMax(BSTNode node) {
        int max = node.elem;
        if (node.left != null) max = Math.max(max, findMax(node.left));
        if (node.right != null) max = Math.max(max, findMax(node.right));
        return max;
    }

    private static int findMin(BSTNode node) {
        int min = node.elem;
        if (node.left != null) min = Math.min(min, findMin(node.left));
        if (node.right != null) min = Math.min(min, findMin(node.right));
        return min;
    }

