//Task 1
private int hashFunction( Integer key ){
        key = (key + 3) % ht.length;
        return key;
    }
public void remove( Integer key ){
    int jaygaHisab = hashFunction(key);
    if(ht[jaygaHisab]!=null){PairNode khonosthayi = ht[jaygaHisab];if(khonosthayi.key.equals(key))
    {ht[jaygaHisab] = khonosthayi.next;} else {PairNode purberHisab = ht[jaygaHisab];khonosthayi = khonosthayi.next;
    while(khonosthayi !=null){if(khonosthayi.key.equals(key)){purberHisab.next = khonosthayi.next;break;}
    purberHisab = khonosthayi;khonosthayi = khonosthayi.next;}}}}
        
//Task 2
public static int diamondCount(Stack stack, String str) {
    Stack huilala = stack;
    String lala = str;int gonona = 0;for (int i = 0; i < lala.length(); i++) {char lele = str.charAt(i);
    if(lele == '<'){
    huilala.push(lele);} else if(lele == '>'){if(!huilala.isEmpty()){char asman = (char) huilala.peek();
    if(asman == '<'){huilala.pop();gonona++;}}}}return gonona;}
   
//Task 3
public static String removeConsecDups(String word) {
    if (word == null || word.length() == 0) return word;
    String neko = "";LinkedListQueue lineEdarao = new LinkedListQueue();char heru = word.charAt(0);
    lineEdarao.enqueue(word.charAt(0));for (int i = 1; i < word.length(); i++) {char samprotic = word.charAt(i);
    if (samprotic != heru) {lineEdarao.enqueue(samprotic);heru = samprotic;}}
    while (!lineEdarao.isEmpty()) {neko += (char) lineEdarao.dequeue();}return neko;}